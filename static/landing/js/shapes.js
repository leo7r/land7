function makeShape( shape, phase, drawboard ) 
{
	function getordef( what, def ) { return typeof what != 'undefined' ? what : def; }
	function A( r, params, point ) { return " A" + r + "," + r + " " + params + " " + point.str(); }

	var aoffsElement = getordef( shape.aoffselement, 0 );
	var ooc = getordef(shape.ooc, 0);
	var width = getordef(shape.width, 100);
	var c = null;
	var paper = drawboard.paper;
		
	if ( shape.type == "circle" ) 
	{
		var r = shape.r ? shape.r : 100;
		c = paper.circle( drawboard.center.x, drawboard.center.y - ooc * drawboard.scale, r * drawboard.scale );
	} 
	else if ( shape.type == "circletouch" ) 
	{
		var overlap = typeof shape.overlap != 'undefined' ?  shape.overlap : 0;
		var alpha = phase / 360 * Math.PI * 2 / 2 / ( 100 - overlap ) * 100;
		var b = Math.sin( alpha ) * ooc;
		var x = Math.cos( alpha ) * ooc;
		var y = ooc - x;
		var r = Math.sqrt( y * y + b * b ) * drawboard.scale;
	
		if ( overlap <= 0 ) {
			c = paper.circle( drawboard.center.x, drawboard.center.y - ooc * drawboard.scale, r );
		} else {
			var c1pos = new Pos( drawboard.center.x, drawboard.center.y - ooc * drawboard.scale );
			var c2pos = c1pos.rot_( phase, drawboard.center );
			var crossp = DrawCalc.circleIntersect( c1pos, r, c2pos, r );
	
			var path = "M" + crossp[0].str() + " A" + r + "," + r + " 0 1 1 " + crossp[1].str() + " A" + r + "," + r + " 0 0 0 " + crossp[ 0 ].str();
			c = paper.path( path );
		}
	} 
	else if ( shape.type == "pie" ) 
	{
		var startR = getordef( shape.start, 0 ) * drawboard.scale;
		var endR = getordef( shape.end, 100 ) * drawboard.scale;
		
		var p0 = new Pos( drawboard.center.x, drawboard.center.y );
		var p1 = p0.translate_( 0, -endR ).rot( - phase / 200 * width, drawboard.center );
		var p2 = p0.translate_( 0, -endR ).rot( + phase / 200 * width, drawboard.center );
		var p3 = p0.translate_( 0, -startR ).rot( + phase / 200 * width, drawboard.center );
		var p4 = p0.translate_( 0, -startR ).rot( - phase / 200 * width, drawboard.center );
	
		var cdef1 = width / getordef( shape.n, 1 ) > 50 ? " 0 1 1 " : " 0 0 1 ";
		var cdef2 = width / getordef( shape.n, 1 ) > 50 ? " 0 1 0 " : " 0 0 0 ";
		
		// Special case for IE ( when startR == 0 ) and in general ( startR < 0 )
		if ( startR <= 0 ) {
			c = paper.path( "M" + p1.str() + " A" + endR + "," + endR + cdef1 + p2.str() + " L" + p3.str() + " L"+ p4.str() + "Z");
		} else {
			c = paper.path( "M" + p1.str() + " A" + endR + "," + endR + cdef1 + p2.str() + " L" + p3.str() + " A" + startR + "," + startR + cdef2 + p4.str() + "Z");
		}
	} 
	else if ( shape.type == "eye" ) 
	{
		var startR = ( shape.start ? shape.start : 0 )  * drawboard.scale;
		var endR = ( shape.end ? shape.end : 100 ) * drawboard.scale;
		var r = shape.r ? shape.r * drawboard.scale : ( endR - startR );
 		var chop = getordef( shape.chop, 0 ) * drawboard.scale;
 		
		var p1 = drawboard.center.translate_( 0, - startR );
		var p2 = drawboard.center.translate_( 0, - endR );
	
		if ( chop ) {
			// Calculate position of leaf circles
			var y = ( - startR - endR ) / 2;
			var x = Math.sqrt( Math.pow( r, 2 ) - Math.pow( ( endR - startR ) / 2, 2 ) );
			var posR = drawboard.center.translate_( x, y );
			var posL = drawboard.center.translate_( -x, y );
			// Intersection point of chop-circle and (left) leaf circle (it's the left arc, the right 'center')
			var crosspL = DrawCalc.circleIntersect( drawboard.center, chop, posR, r ) [1];
			// Intersection point of chop-circle and (right) leaf circle (it's the right arc, the left 'center')
			var crosspR = DrawCalc.circleIntersect( drawboard.center, chop, posL, r ) [1];
	
			c = paper.path( "M" + crosspL.str() + " A" + r + "," + r + " 0 0 1 " + p2.str() + " A" + r + "," + r + " 0 0 1 " + crosspR.str() + " A" + chop + "," + chop + " 0 0 0 " + crosspL.str() + " Z");
		} else {
			c = paper.path( "M" + p1.str() + " A" + r + "," + r + " 0 0 1 " + p2.str() + " A" + r + "," + r + " 0 0 1 " + p1.str() + " Z");
		}	
	} 
	else if ( shape.type == "openstar" ) 
	{
		var sides = shape.sides;
		var shapeCenter = new Pos ( drawboard.center.x, drawboard.center.y - ooc * drawboard.scale ); 
		var sidesPhase = 360 / sides;
		var pointType = getordef( shape.pointtype, 'straight' );
		var startR = getordef( shape.startr, 80 ) * drawboard.scale ;
		var endR = getordef( shape.endr, 100 ) * drawboard.scale ;
		var pointR = getordef( shape.pointr, 2 ) * drawboard.scale ;
		
		var posBase = shapeCenter.translate_( 0, -startR ).rot( sidesPhase / 100 * aoffsElement, shapeCenter );
		var posPeak = shapeCenter.translate_( 0, -endR ).rot( sidesPhase / 100 * aoffsElement, shapeCenter );
	
		var path = "M" + posBase.rot_( - sidesPhase / 2, shapeCenter ).str();
		for ( var i = 0; i < sides; i++) {
			var ps = sidesPhase * i;
			if ( pointType == 'straight' ) {
				path += " L" + posPeak.rot_( ps, shapeCenter ).str();
				path += " L" + posBase.rot_( ps + sidesPhase / 2, shapeCenter ).str();
			} else if ( pointType == 'flower' || pointType == 'wavel' || pointType == 'waver' || pointType == 'sharp' ){
				var flower_r = getordef( pointR, 100 );
				var params1 = ( pointType == 'wavel' || pointType == 'flower' ) ? "0 0 1" : "0 0 0";
				var params2 = ( pointType == 'waver' || pointType == 'flower' ) ? "0 0 1" : "0 0 0";
				path += A( flower_r, params1, posPeak.rot_( ps , shapeCenter ) );
				path += A( flower_r, params2, posBase.rot_( ps + sidesPhase / 2, shapeCenter ) );
			}
		}
		c = paper.path( path + " Z" );
	} 
	else if ( shape.type == "kite" ) 
	{
		var start = getordef( shape.start, 0 ) * drawboard.scale;
		var end = getordef( shape.end, 100 ) * drawboard.scale;
		var middle = getordef( shape.middle, ( start + 0.5 * ( end - start ) ) / drawboard.scale ) * drawboard.scale;

		var p0 = new Pos ( drawboard.center.x, drawboard.center.y ); 
		var posBase = p0.translate_(0, -start );
		var posPeak = p0.translate_(0, -end );
		var posLeft = p0.translate_(0, -middle ).rot( - phase / 200 * width, p0 );
		var posRight = p0.translate_(0, -middle ).rot( + phase / 200 * width, p0 );
	
		c = paper.path( "M" + posBase.str() + " L" + posLeft.str() + " L" + posPeak.str() + " L" + posRight.str() + " Z" );
	}  
	else if ( shape.type == "line" ) /* This draws polygons! */
	{
		var r = getordef( shape.r, 100 ) * drawboard.scale;
		var shapeCenter = new Pos ( drawboard.center.x, drawboard.center.y - ooc * drawboard.scale ); 
		var sides = shape.sides;
		var sidesPhase = 360 / sides;

		var posBase = shapeCenter.translate_(0, - r ).rot( sidesPhase / 100 * aoffsElement, shapeCenter );
		var path = "M" + posBase.str();
		for ( var i = 0; i < sides; i++ ) {
			path += " L" + posBase.rot_( sidesPhase * i , shapeCenter ).str();
		}
		c = paper.path( path + " Z" );
	} 
	else if ( shape.type == "triangle" ) 
	{
		var peak = getordef( shape.peak, 100 ) * drawboard.scale;
		var base = getordef( shape.base, 10 ) * drawboard.scale;
		var posPeak = drawboard.center.translate_(0, -peak); 
		var posBaseLeft = drawboard.center.translate_(0, - base ).rot( - phase / 200 * width, drawboard.center );
		var posBaseRight = drawboard.center.translate_(0, - base ).rot( + phase / 200 * width, drawboard.center );
		c = paper.path( "M " + posBaseLeft.str() + " L" + posPeak.str() + " L" + posBaseRight.str() + " Z" );
	} 
	else if ( shape.type == "heart" ) 
	{
		var size = shape.size ? shape.size : 100;
		var q = new CurveDef().fromString( "M 254.61918,253.64205 C 117.17208,251.17089 -10.019359,466.12329 360.54492,688.98275 C 360.95119,688.25159 362.51369,688.25159 362.91995,688.98275 C 745.43794,458.93404 597.58506,237.34257 455.54564,254.5921 C 400.17294,261.31658 374.04232,292.04855 361.73239,318.48008 C 349.42256,292.04855 323.29184,261.31658 267.91932,254.5921 C 263.48052,254.05283 259.053,253.72191 254.61918,253.64205" );
		q.translate( -361.7, -493 + 22 );
		q.scale( 0.4 / 100 * size * drawboard.scale );
		q.translate( drawboard.center.x, - ooc * drawboard.scale + drawboard.center.y);
		c = paper.path( q.str() );
	} 
	else if ( shape.type == 'figure' )
	{
		var size = getordef( shape.size, 20 );
		
		var figures = {};
		figures.heart = "M 254.61918,253.64205 C 117.17208,251.17089 -10.019359,466.12329 360.54492,688.98275 C 360.95119,688.25159 362.51369,688.25159 362.91995,688.98275 C 745.43794,458.93404 597.58506,237.34257 455.54564,254.5921 C 400.17294,261.31658 374.04232,292.04855 361.73239,318.48008 C 349.42256,292.04855 323.29184,261.31658 267.91932,254.5921 C 263.48052,254.05283 259.053,253.72191 254.61918,253.64205"; 
		figures.dolphin2 = "M344.665,418.047c0,0-0.462,4.156-3.695,4.62c0,0-0.346,1.038,5.197,1.905c5.544,0.865,16.111,0.52,25.291-11.607 c0,0,24.079-0.693,34.821,1.732c10.738,2.425,26.851,9.527,30.833,8.489c3.985-1.04,4.331-3.118,3.811-6.236 c-0.52-3.118-12.992-10.221-12.992-10.221s1.04-10.047-7.448-18.362c-8.487-8.315-22.865-19.055-41.574-23.733 c-18.709-4.678-72.065,1.212-76.396,0.867c-4.328-0.347-12.124-3.465-17.323-6.41c-5.193-2.945-11.084-8.835-25.811-9.008 c-14.724-0.174,2.079,7.102,2.945,7.968c0.865,0.867,11.781,10.567,2.945,20.615s-28.236,21.309-45.04,39.67 c-16.804,18.361-26.159,37.244-27.543,43.48c-1.388,6.236-12.473,9.009-17.671,11.434c-5.194,2.424-21.478,7.622-20.44,11.086 c1.039,3.465,9.355-4.156,14.552-4.156s14.55-1.387,18.709,1.385c4.157,2.771,10.394,10.74,12.473,10.74 c2.08,0,1.386-2.078-1.388-6.582c-2.771-4.505-5.888-12.473-0.346-15.938c5.545-3.465,16.286-13.513,19.749-16.629 c3.465-3.12,25.985-17.324,29.796-19.057s18.709-5.889,25.985-5.889c7.273,0,30.487-4.852,38.804-6.237 C321.222,420.587,343.512,416.198,344.665,418.047z";
		figures.butterfly2 = "M146.282,231.048c-3.505,10.167-4.262,9.926-8.753,15.837c-4.403,5.797-10.441,10.039-22.787,8.713    c-4.879-0.523-12.063-3.619-18.766-6.032c-5.811-2.091-12.043-4.818-16.085-8.042c-3.827-3.05-6.957-7.916-10.723-11.394    c-4.142-3.827-9.155-6.508-12.063-10.054c-5.462-6.654-11.95-16.641-12.734-23.457c-2.024-17.565,3.016-29.79,10.053-39.542    c4.806-6.655,12.768-9.886,16.755-18.096c-5.315-6.722-17.03-4.202-23.457-8.712c-3.613-2.533-10.254-14.229-12.064-18.766    c-2.486-6.233-3.297-13.364-5.361-20.106C26.49,78.952,22.489,64.65,16.223,54.537c-3.331-5.368-8.069-9.563-10.724-14.744    C-2.402,24.364-3.253,0.378,16.223,0.25c5.723-0.034,9.041,3.317,13.404,4.021c3.747,0.604,9.108-0.442,12.734,0    c8.82,1.086,23.604,8.063,31.5,12.734c3.19,1.883,5.663,5.06,8.712,6.702c2.755,1.481,6.943,1.997,9.383,3.351    c3.907,2.165,7.399,7.741,11.394,10.723c3.572,2.667,7.814,4.001,11.394,6.702c9.45,7.131,17.807,16.467,26.808,25.467    c7.701,7.701,16.239,17.519,24.797,27.479c3.432,3.994,8.163,5.308,9.382,5.375c3.6,0.208,7.882-5.114,12.734-5.375    c4.617-0.248,8.063,5.006,12.063,4.691c3.485-0.275,11.896-10.851,16.755-16.085c11.89-12.801,20.776-21.219,32.84-32.84    c3.057-2.942,5.684-5.757,8.713-8.042c3.15-2.379,6.93-3.646,10.053-6.032c3.82-2.916,6.595-8.21,10.724-10.723    c2.325-1.414,6.072-1.984,8.713-3.351c3.512-1.816,6.407-5.181,10.053-7.372c3.397-2.044,8.605-4.155,12.733-6.032    c4.712-2.145,9.96-4.819,13.404-5.362c2.989-0.469,6.85,0.496,10.724,0c4.062-0.516,7.814-2.862,11.394-2.681    c10.334,0.522,14.663,9.249,13.403,22.787c-1.394,14.946-8.779,27.224-14.074,39.542c-3.552,8.264-6.474,17.305-8.712,26.808    c-3.157,13.391-7.567,33.45-17.426,39.542c-7.667,4.738-18.384,1.3-26.138,7.372c2.359,4.678,7.982,5.797,12.063,8.712    c9.282,6.622,15.301,14.477,18.096,28.819c1.253,6.44,2.325,15.804,1.34,23.457c-0.817,6.347-6.078,18.29-10.053,24.127    c-2.922,4.29-9.598,8.847-15.415,14.074c-10.562,9.49-13.518,12.346-28.148,16.085c-10.649,2.722-21.948,5.482-32.84-0.67    c-5.02-2.835-9.557-17.566-11.393-29.489c-1.341-8.712-0.818-5.656-1.341-8.712c-0.717-4.176-0.269-3.586-1.341-9.383    c-1.3-7.024-3.512-18.92-4.711-24.121c-0.463-2.023-5-22.666-9.664-22.498c-6.294,0.221-8.311,12.546-9.001,21.493    c-0.335,4.336-1.535,12.419-2.668,20.669c-1.527,11.111-1.93,31.566-12.211,30.588c-7.486-0.711-9.296-16.078-9.671-24.999    c-0.309-7.332-1.447-15.086-2.339-22.579c-0.945-7.955-2.446-24.844-4.779-26.674c-7.5-1.836-7.935,8.552-9.168,13.498    c-0.67,2.667-1.113,4.738-1.662,6.333c-2.232,7.179-2.527,12.868-4.504,21.836c-1.213,5.502-3.25,13.042-5.355,21.198    C146.61,230.384,146.114,232.382,146.282,231.048z";
		figures.bird = "m139.891632,236.201996c1.521652,-8.404709 9.424103,-13.629944 9.997528,-22.109161c-7.565887,2.17691 -12.972687,4.442078 -20.187012,5.80751c-7.742905,1.465851 -12.808975,-2.159897 -18.263985,3.373077c1.244911,-10.405075 18.584755,-5.597763 24.992973,-9.930511c-5.418442,0.628448 -6.334259,-6.325806 -11.534958,-0.561234c3.227798,-9.432419 15.257233,-1.199387 21.724472,-3.373856c5.045288,-1.695038 9.660095,-7.52037 13.264374,-11.428741c6.740631,-7.305756 14.904861,-14.579086 20.378143,-22.859085c-4.045547,-0.350677 -8.29718,-0.230011 -12.303665,0.187073c0.106354,0.539352 0.309982,0.97345 0.383926,1.685333c-4.535858,-2.951126 -4.727829,0.596848 -6.536194,1.311951c-4.524231,1.788986 -7.721283,1.989838 -12.688477,2.061096c-10.090591,0.144958 -10.45459,1.704758 -15.956131,8.431458c-3.017548,3.688889 -10.057358,5.575058 -6.920982,10.493317c-9.138222,-4.144028 6.041725,-13.765152 6.920982,-18.924774c-7.375565,1.558167 -34.677193,4.493103 -37.488632,9.743408c-0.32328,-8.918152 17.596634,-9.995255 24.223419,-10.492538c0,-0.12471 0,-0.251053 0,-0.374954c-0.191971,0.061554 -0.25679,0 -0.191971,-0.187881c-5.365257,-0.664902 -9.673416,-5.554016 -13.649986,-1.311172c1.238266,-8.139084 11.510033,-2.762421 14.995453,-1.874008c7.682228,1.958237 12.087624,-2.270844 20.378166,-3.559326c-36.831276,-4.842957 -72.633713,-33.927429 -73.054222,-72.511551c-0.1604,-14.796127 5.991035,-30.104088 -1.537437,-43.844158c-5.974419,-10.903942 -18.034603,-12.829788 -28.837418,-17.23785c7.18359,-7.218277 19.867897,-2.535671 27.875885,-5.434155c4.686287,-1.695845 9.956802,-5.507853 15.187431,-6.745316c13.938347,-3.296938 26.560333,1.418062 37.488632,9.555527c7.521828,5.600986 13.479622,13.57243 21.724449,18.174858c10.541046,5.884438 24.010681,7.657219 35.373627,11.991589c11.886505,4.53521 22.266312,11.142845 34.412918,14.989677c12.05603,3.818489 24.283249,7.705002 35.565582,13.490639c12.385971,6.351723 24.545029,6.692673 38.257339,8.993484c7.0224,1.178345 21.13858,2.007637 24.608215,8.432251c-7.387177,1.569511 -15.705994,2.495987 -23.454712,4.309265c23.320923,0 47.072296,3.816048 70.362427,6.089333c6.948456,0.677856 18.068695,-1.541168 21.916443,4.403198c1.152679,1.780876 0.340759,5.447929 -0.961487,6.371162c3.349945,3.61441 -0.413055,4.949875 -4.230072,4.309265c10.195313,0.579041 9.410797,5.298096 0.384796,5.246262c-17.032349,-0.099609 -35.106842,-3.411133 -52.290436,-4.684219c-10.848541,-0.804199 -21.677094,-1.661835 -32.491577,-2.716278c-5.870514,-0.573364 -12.65271,3.168976 -18.455109,4.591095c-11.490906,2.816696 -26.591064,1.195358 -34.988815,8.61853c-13.381561,11.828812 -27.840149,18.627563 -42.872162,24.546005c-6.702423,2.639328 -28.557358,22.318909 -29.798126,30.727676c-0.10553,0.711868 -1.028824,1.926666 -1.345459,2.623962c6.425674,0.294785 23.991562,-9.069626 23.838654,2.621506c-5.385208,-6.343628 -6.537033,-0.693253 -10.38147,0.936203c-2.83139,1.201019 -7.029022,1.073059 -9.996689,1.874008c-7.235962,1.953384 -8.849854,4.335175 -13.457169,11.242477c-3.073242,4.606461 -6.859497,9.015335 -10.381485,12.928574";
		figures.falcon = "m 103.02024,154.20457 c -0.32878,-0.53198 -1.93034,-0.70073 -3.55902,-0.375 -1.87779,0.37556 -2.96122,0.18064 -2.96122,-0.53275 0,-0.61875 -1.11643,-1.125 -2.48095,-1.125 -1.80699,0 -2.65003,-0.67367 -3.10336,-2.47987 -0.51045,-2.03382 -0.95052,-2.30427 -2.44661,-1.50359 -2.8106,1.5042 -4.96908,0.13911 -4.96908,-3.14258 0,-2.58047 -0.27532,-2.84296 -2.41784,-2.30523 -2.78107,0.69801 -4.90543,-2.13248 -4.38837,-5.84706 C 76.86221,135.68361 76.55,134.6819 76,134.66745 c -2.16989,-0.057 -3.5,-1.74566 -3.5,-4.44354 0,-2.08136 -0.46288,-2.79313 -1.75,-2.69098 -1.17762,0.0935 -1.84703,-0.69351 -2.04664,-2.40611 -0.24471,-2.09947 1.1084,-3.74461 7.72947,-9.39766 4.41437,-3.76896 8.29292,-7.69328 8.61902,-8.7207 0.32609,-1.02742 0.0498,-3.5138 -0.61411,-5.52527 l -1.20699,-3.657232 -2.72188,3.334982 c -3.35465,4.1103 -5.90583,3.66889 -5.23443,-0.90565 0.53584,-3.650942 -1.37121,-6.422182 -3.95459,-5.746622 -2.09075,0.54675 -2.36343,-0.39328 -0.61985,-2.13685 0.93333,-0.93334 0.8037,-1.2 -0.58334,-1.2 -0.98083,0 -1.60118,-0.54644 -1.37856,-1.21431 0.44324,-1.32971 -0.49104,-1.89257 -16.97148,-10.22461 -6.17836,-3.1236 -11.57836,-6.22598 -12,-6.89419 -0.42164,-0.6682 -2.08768,-2.05673 -3.70231,-3.08562 C 28.87622,65.172608 22.5,57.161878 22.5,52.711648 c 0,-2.31678 1.53725,-1.85088 2.76196,0.83707 1.94347,4.26544 7.64923,9.91739 11.91817,11.80578 2.29908,1.017 8.82408,2.53873 14.5,3.38161 12.02372,1.78554 20.40419,3.81666 24.44693,5.92507 5.13422,2.67764 7.82085,1.57803 8.52536,-3.48936 0.25418,-1.82824 -0.25701,-2.76525 -1.90242,-3.48713 -1.2375,-0.54292 -2.25,-1.30928 -2.25,-1.703 0,-0.77806 6.57027,-2.80905 9,-2.78207 2.24288,0.0249 5.57353,3.05348 7.43993,6.76516 3.45399,6.86885 7.44643,6.28571 29.06007,-4.24456 19.89883,-9.6948 48.18344,-29.2943 55.60758,-38.53264 2.92826,-3.64384 6.23669,-6.43833 5.06338,-3.38072 -0.27552,0.71799 -0.16789,3.39401 0.89824,3.67281 1.09998,0.28765 2.73119,-1.43144 2.73119,-0.28617 0,1.10566 -0.23789,5.00841 0.44961,5.24889 0.88992,0.31128 0.67388,1.08649 -0.75,2.69113 -1.1,1.23965 0.13769,2.28093 0.30477,3.29221 0.2001,1.21109 -2.73954,3.17811 -4.75098,4.21826 -1.73721,0.89835 -3.05379,2.37758 -3.05379,3.43106 0,1.01853 -0.675,2.41207 -1.5,3.09676 -0.825,0.68469 -0.16601,1.60764 -0.16601,2.37709 0,0.76944 -2.5521,2.21864 -4.0409,2.89435 -1.48881,0.67571 -4.52631,3.18184 -6.75,5.56917 -8.26217,8.87016 -14.74739,15.1594 -15.63181,15.1594 -0.50121,0 0.0225,0.7168 0.0225,1.2668 0,0.55 -1.83379,0.7332 -2.93379,0.7332 -1.1,0 -2,0.40276 -2,0.89504 0,0.49227 -1.11723,1.95477 -2.48272,3.25 -1.3655,1.29522 -2.4905,2.9656 -2.5,3.71195 -0.01,0.75716 -0.64374,1.11659 -1.43452,0.81314 -0.77948,-0.29912 -1.68328,0.14943 -2.00843,0.99676 -0.32515,0.84734 -1.23936,1.29189 -2.03157,0.98789 -0.82373,-0.31609 -1.68244,0.17463 -2.00579,1.14625 -0.51781,1.55596 -8.37461,7.81233 -9.53697,7.59429 -0.275,-0.0516 -0.99381,0.58153 -1.59736,1.40693 -0.85513,1.16946 -1.26901,1.22299 -1.875,0.24247 -0.61641,-0.99738 -0.95028,-0.9789 -1.61035,0.0891 -0.6849,1.1082 -1.33632,1.04987 -3.66995,-0.32864 l -2.83723,-1.676 -3.47398,4.685412 c -1.91069,2.57698 -3.32563,5.44354 -3.1443,6.37015 0.49487,2.52888 8.45121,7.20194 20.20817,11.86904 5.775,2.29247 11.12403,4.7583 11.88674,5.47963 2.1664,2.04886 0.59326,4.46659 -2.90625,4.46659 l -3.08227,0 2.56974,3.3691 c 3.08357,4.04278 2.51061,6.6309 -1.46796,6.6309 -1.55397,0 -3.04057,0.66334 -3.36163,1.5 -0.31658,0.825 -1.48972,1.5 -2.60699,1.5 -1.15751,0 -2.03138,0.65878 -2.03138,1.53138 0,2.10642 -2.42037,2.84919 -4.92186,1.51044 -1.85328,-0.99185 -2.07814,-0.83448 -2.07814,1.45438 0,3.16486 -2.59503,4.33734 -4.77496,2.15742 -1.49316,-1.49317 -1.72182,-1.37742 -2.92314,1.4797 -1.06143,2.52438 -1.75778,3.01269 -3.75249,2.63137 -1.49593,-0.28596 -2.65111,0.0579 -2.96793,0.88356 -0.59935,1.56189 -3.18243,1.80645 -4.06124,0.3845 z";
		figures.butterfly3 = "m11.106536,4.93515c-3.831542,-1.983855 -6.391752,-0.480118 -6.9801,1.799803c-2.982523,13.043716 -1.59271,16.41116 7.836508,21.176003c-6.371049,1.17062 -7.503305,8.966238 -3.336098,12.767477c4.111213,3.362911 6.734587,5.103973 9.814978,2.662956c2.910213,-2.533527 3.826733,-2.166782 4.78727,1.675064c0.886503,3.829033 4.023077,4.103374 9.334101,4.037296c5.628075,-0.373875 9.603138,-7.174793 5.351791,-12.062187c10.342945,2.153431 13.529064,0.3871 19.329525,-11.67062c1.922905,-4.298742 -4.301243,-11.048384 -27.653057,0.042559l-0.441053,-4.562025l-3.584795,3.153381c-5.671366,-11.615277 -10.627522,-17.03585 -14.459069,-19.019707z";

		figures.rabbit = "m 335.94313,30.576451 c -9.79312,-0.146115 -17.39091,4.439466 -17.39091,13.789758 0,11.508038 -2.91019,60.415461 1.40532,76.238951 4.31553,15.82355 21.58583,38.97215 34.51834,54.67597 10.06946,12.22726 4.34772,41.69626 4.34772,56.0813 0,14.38499 -2.89751,25.9107 -8.65153,25.9107 -5.75402,0 -14.35971,5.75217 -20.11373,11.50612 -5.75395,5.75402 -11.51588,12.95631 -18.70841,7.20229 -7.19251,-5.75402 -20.15388,-11.49441 -43.16987,-15.80992 -23.01609,-4.31551 -61.84129,-0.0234 -86.29583,8.60763 -24.45458,8.63104 -76.25857,56.11061 -90.643535,77.6882 -14.385056,21.5775 -15.799189,87.73247 -14.36068,97.80193 1.438509,10.06953 -2.908267,17.28255 -10.100778,8.65153 -7.192459,-8.63104 -12.911438,-4.30381 -12.911438,-4.30381 0,0 -7.202292,14.37045 -7.202292,21.56298 0,7.19244 2.854564,14.36068 2.854564,14.36068 0,0 -11.506099,8.65056 -11.506099,14.40458 0,5.75397 11.515881,15.83044 18.708391,24.46146 7.192546,8.63097 31.651182,25.89997 41.720624,24.46148 10.069543,-1.43851 28.775063,-0.0121 35.967573,4.3038 7.19253,4.31551 24.44687,10.06761 46.02443,11.5061 21.57752,1.43851 81.97845,5.75307 97.80193,5.75307 15.82357,0 20.1675,-2.86435 27.35996,-10.05688 7.19253,-7.19245 -5.78527,-15.84115 -10.10079,-25.9107 -4.31551,-10.06946 14.40363,-7.16912 20.15765,-8.60763 5.75402,-1.43849 21.59424,-11.5061 31.66376,-11.5061 10.06953,0 8.6165,10.05589 21.56298,15.80993 12.94654,5.75393 31.63939,24.43902 46.02443,27.31602 14.38497,2.87695 47.47173,0.0121 58.97979,-4.30381 11.50797,-4.31551 10.06946,-14.37044 0,-21.56297 -10.06955,-7.19244 -34.50663,-20.16742 -38.82214,-27.35994 -4.31551,-7.19246 -5.74329,-15.81969 1.44924,-23.01224 7.19251,-7.19252 14.35876,-4.30292 25.86678,-10.05685 11.50806,-5.75402 15.80992,-23.04354 15.80992,-33.11301 0,-10.06953 1.36928,-21.01352 5.75307,-27.31602 3.67345,-5.28128 5.10015,-22.13212 5.30499,-33.64009 0.21874,-12.28864 -5.29329,-15.24871 -9.60881,-22.44122 -4.31543,-7.19246 4.30285,-17.25917 10.05687,-17.25917 5.75402,0 31.65108,-4.33602 41.72062,-8.65153 10.06946,-4.31546 20.16744,-23.03273 27.35995,-31.66377 7.19246,-8.63095 1.41799,-27.31512 -8.65154,-33.06907 -10.06954,-5.75402 -10.07746,-21.59431 -18.70841,-31.66377 -8.63103,-10.06953 -18.68507,-31.62961 -27.31604,-38.82213 -8.63101,-7.19253 -28.77502,-12.95535 -35.96755,-12.95535 -7.19253,0 -11.50612,9e-4 -11.50612,-5.75306 0,-5.75402 -1.44924,-12.9203 -1.44924,-25.86678 0,-12.94655 -16.24344,-68.464566 -37.3729,-102.149659 -4.40799,-7.027282 -11.5581,-5.405316 -20.15765,-2.898485 -5.69412,1.659863 -8.60761,4.35564 -8.60761,23.056136 0,18.700566 -11.50515,-0.03133 -17.25917,-10.100794 -5.75403,-10.069512 -15.86265,-21.58444 -28.80918,-24.461458 -2.42749,-0.539415 -4.76669,-0.800692 -7.02665,-0.834399 z";
		figures.dolphin = "m358.71011,18.75104c-14.20599,5.06021 -27.17041,11.80438 -40.23648,17.814c-4.45544,2.04436 -9.51398,5.29857 -13.64066,6.29358c-10.51901,2.52524 -26.97595,-1.89212 -40.38174,-2.35297c-33.51309,-1.14317 -55.20822,1.2298 -82.7561,5.22832c-12.89124,1.86856 -26.23747,3.61662 -37.55452,6.81085c-9.66528,2.73131 -20.74965,8.83061 -31.56529,13.95897c-17.09273,8.11189 -28.73369,15.74554 -42.06026,25.52142c-22.27359,16.3325 -36.29823,36.89163 -52.59917,59.47977c-7.11572,9.85999 -17.37012,24.55202 -17.8779,36.22058c-9.42221,13.74677 -23.73907,22.13907 -27.33002,42.26602c5.02051,11.77057 18.03152,1.30365 25.87061,-2.61493c6.48419,-3.25009 13.45908,-7.1348 19.20712,-8.69318c29.86256,-8.1037 71.47766,3.48074 100.55055,-3.94473c10.30765,-2.63135 19.23282,-7.94171 29.47218,-10.19064c9.72318,-2.14227 17.15883,1.64813 24.09138,4.53171c3.6826,1.53787 7.56346,3.61456 10.90739,5.26831c21.66293,10.77551 43.31274,22.20157 72.39713,26.50308c23.34198,3.45001 43.62244,-3.13013 62.59689,-6.6842c4.81763,-0.90326 11.03738,-0.57672 14.69046,-4.53375c-15.14493,-3.29416 -27.71225,-8.91104 -43.52686,-14.90424c-20.77313,-7.86789 -36.91,-13.19055 -44.76184,-28.98581c9.29825,-2.34531 20.06686,-0.60693 29.74747,1.02527c10.56982,1.77783 21.05936,3.44388 31.20041,5.05203c42.8266,6.78619 75.07465,18.18048 107.67502,32.96478c15.83804,7.1748 30.4324,17.16501 43.85294,25.55527c27.48779,17.20139 50.95593,38.56177 73.08752,61.82864c10.02307,10.53665 18.9646,23.7272 29.83435,36.30466c4.74658,5.49902 9.52057,11.63062 14.60028,18.41483c4.84491,6.45197 12.24622,14.35574 13.27313,19.99881c1.15247,6.2254 -2.2832,13.05777 -4.00922,19.86246c-2.99335,11.83057 -5.19452,24.5141 -4.19501,36.65515c1.30548,15.70734 4.95422,31.00427 12.60126,42.90497c3.31549,-2.84155 4.6701,-7.83771 6.37433,-12.41937c8.37891,-10.31067 19.52716,-20.60541 19.80579,-37.76459c22.88647,11.38605 67.33752,10.42889 94.03107,10.13849c8.02393,-0.09009 16.20074,0.72693 22.84821,-2.27679c-14.01587,-7.82565 -24.30664,-17.7301 -36.49268,-27.83051c-18.43481,-15.2688 -33.67969,-28.13281 -60.85938,-36.30057c-8.81049,-2.64722 -18.89362,-4.08109 -23.72217,-8.98697c-3.7088,-3.75504 -4.83948,-12.07303 -6.71851,-20.08087c-5.06335,-21.65869 -11.6507,-44.63339 -17.51715,-62.85748c-17.62628,-54.78403 -44.52197,-103.47388 -80.30902,-141.28874c-18.13165,-19.17555 -39.79236,-34.78879 -63.13873,-52.15219c-3.99011,-6.02136 -11.46234,-14.14764 -13.00922,-23.33298c-1.58078,-9.45554 1.26941,-17.75555 7.34006,-24.10757c13.27737,-9.32736 34.13412,-10.3588 43.15927,-24.32394c-11.79443,-8.17239 -26.42926,-10.56741 -40.7887,-11.90488c-31.02997,-2.88765 -60.09689,-0.64693 -84.16425,7.92995";
		figures.butterfly = "M141.75,353.515c1.528,2.531,2.098-2.798,3-3c3.955-0.886,1.803,3.855,4,3c4.796-1.867,26.675-31.643,39-24c5.837,3.619-2.37,10.908-5,17c-3.714,8.601-1.135,14.976-15,13c30.009,10.084-15.451,45.207-19,13	c-2.261,2.072-1.23,7.437-3,10c-3.343-0.99-0.84-7.826-3-10c-4.368,3.568-3.786,11.309-8,13c-17.699,7.104-33.655-22.681-11-26	c-12.898,0.635-12.221-4.271-16-14c-0.846-2.179-8.974-13.455-5-16C115.11,321.601,135.33,345.275,141.75,353.515z";
		figures.dove = "m166.50999,338.233c-26.00499,-13.58099 -43.60399,-25.922 -53.74899,-37.64001c-10.021,-11.84299 -12.132,-22.27798 -6.33501,-32.258c-13.955,-7.45401 -23.687,-16.52199 -29.814,-27.37199c-6.004,-11.01399 -8.24,-23.229 -6.377,-37.599c-10.518,-10.808 -17.35,-20.373 -20.497,-28.862c-3.147,-8.61299 -2.774,-15.73599 1.45,-21.98799c-8.57301,-19.627 -12.797,-33.37501 -13.17001,-42.02901c-0.456,-8.696 1.946,-19.503 11.222,-9.275c9.317,10.352 25.466,47.91 44.473,70.85101c18.924,22.94 41.409,44.349 68.408,65.508c-1.57401,-16.439 -0.746,-31.38699 2.939,-45.466c3.686,-14.20399 9.60701,-26.75 18.55099,-38.59299c-0.86899,-17.10202 1.90501,-31.05701 8.32301,-42.52701c6.41899,-11.429 16.19099,-20 29.81398,-25.88c0.414,-6.50099 2.36002,-11.51199 5.83902,-15.65199c3.478,-4.05901 8.19901,-7.04 14.659,-8.779c6.91501,-10.973 12.298,-15.984 16.14899,-15.653c3.85101,0.373 7.453,4.969 6.832,18.096c-0.87,13.251 -9.52298,40.208 -11.26398,60.084c-1.73901,19.669 4.92798,37.93101 0.99399,57.186c-4.18201,19.214 -23.728,38.22 -24.92801,57.18501c-1.20099,18.92499 9.93802,43.97699 18.095,55.198c8.15802,10.93298 20.125,10.68399 30.31201,10.26999c10.228,-0.49701 20.746,-12.87799 29.77301,-13.20898c8.77798,-0.45502 14.40997,7.08099 22.48398,10.767c7.909,3.64398 16.108,7.07999 24.92801,10.76599c-15.27802,3.31299 -27.32901,8.90201 -36.646,17.10199c-9.358,8.19901 -5.384,21.45001 -19.04901,31.76102c-13.91299,10.146 -40.37299,25.88098 -63.065,28.82001c-22.77499,2.733 -46.502,-1.28403 -72.29999,-12.216c-18.8,21.65698 -34.82501,36.979 -48.862,46.91599c-14.12001,9.64902 -30.104,12.58902 -34.701,11.72c-4.514,-0.91101 -1.905,-6.29498 7.826,-16.60501c-25.052,6.12903 -39.33801,7.70203 -43.97601,4.88602c-4.431,-2.939 1.118,-10.104 17.102,-21.98801c-14.16199,2.89902 -19.752,2.237 -17.102,-1.98599c2.733,-4.349 12.795,-13.16901 33.21,-23.43799c20.5,-10.43903 49.444,-22.82001 88.452,-38.10101l0,0z";
		figures.ant = "m17.17661,23.93079c-1.02531,0.84146 7.22663,11.28543 7.73575,11.89354c7.04986,8.43579 14.029,8.7257 14.89167,9.98435c0.86974,1.25158 5.02753,5.43765 12.42387,6.66802c0.02828,1.92333 0.13435,3.7406 0.33234,5.46594c-4.5467,-1.25158 -9.66615,-2.32638 -12.52994,-2.31931c-3.01934,-0.00707 -13.24411,2.84964 -15.07552,3.70524c-0.64346,0.30405 -12.32487,0.00707 -12.32487,1.27986c0,1.28694 11.63191,1.7607 12.11274,1.11016c4.22143,0.67175 16.17861,-1.51321 17.4514,-1.28693c1.2728,0.24041 11.06623,3.09005 11.13694,3.10419c0.73539,3.37997 1.80312,5.22553 3.06884,7.48119c-4.8649,-0.1414 -13.59766,4.67398 -18.46963,9.54595c-4.04465,4.04465 -10.78338,10.58539 -11.80162,12.02789c-3.80423,5.37402 -2.10011,22.18195 0.00707,22.18195c1.65463,0 -2.30517,-15.04723 1.49907,-20.42125c1.09602,-1.54856 13.35018,-9.91365 14.77854,-11.55413c1.42835,-1.64049 9.02268,-3.98809 12.20466,-6.36396c-3.20319,2.07182 -5.39523,5.31037 -5.39523,9.76514c0,16.54631 8.63378,23.21432 15.11795,23.29211c0,0 0.00708,0.02121 0.02121,0.02121c0.01415,0 0.02829,0 0.04243,0c0.01414,0 0.02829,0 0.04243,0c0.01414,0 0.02828,0 0.04243,0c6.4771,-0.08485 15.06844,-6.76701 15.06844,-23.28503c0.00707,-4.15071 -1.90919,-7.26905 -4.75177,-9.34795c3.45776,2.21325 10.23892,4.38406 11.58242,5.92556c1.43543,1.63341 13.63303,9.9985 14.73611,11.55413c3.81131,5.36694 -0.14142,20.43539 1.52735,20.43539c2.09304,0 3.80424,-16.81501 0,-22.18901c-1.0253,-1.43544 -7.75697,-7.96909 -11.80162,-12.01375c-4.87904,-4.87905 -13.59766,-9.69444 -18.46964,-9.54595c1.26572,-2.25567 2.32639,-4.1507 3.06886,-7.53776c0.06363,-0.00707 9.85707,-2.81429 11.13692,-3.04763c1.27987,-0.23335 13.22997,1.95868 17.45847,1.27986c0.47376,0.65761 12.11274,0.17678 12.10567,-1.10309c0.00707,-1.27986 -11.70969,-1.00409 -12.35316,-1.30814c-1.82433,-0.86267 -11.9996,-3.71231 -15.02602,-3.71231c-2.86378,0.00707 -8.02566,1.08187 -12.57236,2.31931c0.19799,-1.7112 0.34648,-3.52847 0.37476,-5.4518c7.39634,-1.24451 11.56121,-5.42351 12.41679,-6.67509c0.86975,-1.25158 7.84889,-1.54149 14.89875,-9.99142c0.50204,-0.60104 8.76105,-11.05208 7.72868,-11.88647c-1.20915,-0.98288 -8.7752,8.76105 -9.07926,9.61666c-2.05061,1.01823 -11.79454,7.50947 -12.96834,7.97616c-1.18087,0.45962 -7.12057,2.58094 -13.43503,6.36397c-0.96874,-3.69817 -3.40826,-6.2084 -6.39225,-7.53776c4.12243,-0.00708 7.12057,-0.81318 7.12057,-5.3528c0,-4.9639 -0.9546,-9.53888 -2.55973,-13.20876c4.39114,-2.28396 7.57312,-4.73055 8.52771,-5.07703c0.9546,-0.36063 1.3223,-1.67584 -0.4879,-4.99925c-2.98399,-5.45886 -6.21547,-10.18941 -6.9155,-9.92778c-0.70005,0.27577 2.56679,10.91066 5.36693,13.20169c-3.31633,0.5869 -5.49422,1.6617 -8.25901,3.57796c-2.17789,-3.29512 -4.97803,-5.27502 -8.06808,-5.32452c-0.00708,-0.00707 -0.01415,-0.02828 -0.02122,-0.02121c-0.02828,0 -0.06364,-0.00707 -0.09192,-0.00707c-3.09713,0.04243 -5.95385,2.05061 -8.12466,5.3528c-2.77186,-1.90919 -4.93561,-3.01228 -8.24487,-3.60625c2.80014,-2.27688 6.08819,-12.9047 5.38815,-13.16633c-0.70003,-0.26163 -3.95273,4.43356 -6.93671,9.89243c-1.81727,3.33047 -1.42129,4.67398 -0.46669,5.02046c0.96166,0.35355 4.14364,2.80014 8.53478,5.0841c-1.61221,3.66281 -2.5668,8.25194 -2.5668,13.21583c0,4.52548 2.99813,5.34573 7.11349,5.34573c-2.97692,1.33643 -5.41644,3.84666 -6.38517,7.53068c-6.31447,-3.78302 -12.28245,-5.87606 -13.45625,-6.34275c-1.18087,-0.45961 -10.91773,-7.00035 -12.96834,-8.01859c-0.29699,-0.84853 -7.84889,-10.57832 -9.06511,-9.58837z";
		figures.dragon = "m72.306999,66.163002c0.174004,-0.234001 3.874001,-11.738003 11.875,-20.455002c8.382004,-9.131001 21.095001,-15.455 21.883003,-13.951c0.992996,1.896 -8.726006,3.313 -16.844002,15.631001c-3.365997,5.106998 -5.476997,11.563999 -5.692001,17.264999c0,0 0.747002,3.078995 1.260002,3.220001c0.513,0.139999 1.562996,-0.018005 1.865997,-0.561005c0.303001,-0.541992 -3.452995,-7.791996 10.684998,-18.663998c12.333,-9.482998 30.889008,-12.620998 31.261993,-12.025997c0.207001,0.329998 -9.294991,5.423 -16.610992,10.859997c-5.884995,4.374001 -9.962997,9.263 -9.424995,9.846001c1.207001,1.306 53.377998,-15.200001 54.101997,-14.301998s-17.007004,7.139 -18.406998,18.406998c-0.800003,6.440002 8.936005,5.996002 22.746994,6.929001c13.812012,0.934006 26.258011,1.844002 26.292999,2.542999c0.035004,0.699997 -16.750992,3.686996 -19.503998,10.125c-2.752991,6.439003 -0.513,12.084999 4.246002,13.578003c4.759003,1.492996 28.229004,4.316002 28.438995,3.709999s-8.166,-5.878998 -8.397995,-6.93c-0.233002,-1.050003 10.498001,-6.858002 15.748001,-9.028c5.248993,-2.169998 12.830994,-4.619003 12.947998,-5.668999c0.117004,-1.050003 -2.729004,-3.920006 -6.789001,-6.789001c-4.05899,-2.868996 -8.888992,-4.129005 -8.748993,-5.459c0.139999,-1.330002 19.479996,-5.016003 44.302994,-8.679001c10.498001,-1.68 21.486008,-4.688999 36.044998,-6.438999c14.558014,-1.749001 30.86499,-3.919003 43.113007,-2.449001c12.247986,1.470001 29.464996,4.758999 43.321991,11.968002c13.856995,7.209 31.916016,21.976997 34.436005,24.566002c2.519012,2.588997 5.528992,4.759995 4.687988,6.019997c-0.839996,1.260002 -25.195984,-0.699997 -37.513977,10.778c-12.318024,11.477997 -15.468018,15.747002 -16.378021,24.005997c-0.908997,8.258995 -0.069,13.928001 1.75,18.196999c1.820007,4.270004 5.180023,9.869003 4.339996,11.059006c-0.839996,1.190002 -21.065979,-4.130005 -26.10498,4.970001c-5.039001,9.097992 -2.031006,17.916992 -0.561005,21.835999c1.470001,3.919998 4.970001,7.453995 4.339996,8.399002c-0.630005,0.944 -12.527008,-2.007004 -22.187988,3.638992c-9.65802,5.646011 -14.882996,10.404999 -14.977997,11.479004c-0.094025,1.074005 7.604004,2.473007 11.523987,2.985001s9.472992,1.072998 12.179016,1.072998s8.957977,-1.912994 9.518982,-0.886993c0.562012,1.024994 -9.145996,6.671997 -10.264984,13.998001c-1.120026,7.325989 -1.399017,10.403992 0.605988,14.32399s4.385986,9.846008 10.450989,9.42601c6.06601,-0.419998 11.38501,-1.588013 13.531006,-1.820007s4.666016,-1.727005 5.600006,-1.212997s0.652008,0.604996 0.187012,1.259995c-0.46701,0.652008 -8.493011,4.666 -10.684998,7.934006c-2.193024,3.266006 -5.319,9.843979 -4.854004,12.783005c0.46698,2.938995 3.686005,6.019989 8.911987,3.453003s6.252014,-4.525024 4.945007,2.332977c-1.304993,6.858002 1.354004,10.452026 7.746002,9.005005c6.393982,-1.444977 13.811981,-3.358978 19.36499,-13.15799c5.553009,-9.796997 6.671997,-17.496002 7.278015,-26.361008s-2.660004,-19.829987 -7.373016,-30.607986c-4.712006,-10.778 -7.09201,-27.902008 -7.277985,-33.035004c-0.188019,-5.133011 -0.233002,-20.25 4.10498,-29.535004c4.33902,-9.286011 11.432007,-20.017998 17.917023,-25.290001s19.409973,-12.178001 20.482971,-13.530998c1.072021,-1.353004 4.713013,-5.646004 3.125,-9.938004c-1.585999,-4.292999 -3.824982,-4.478996 -5.270996,-6.112c-1.444977,-1.632996 -1.97998,-2.603996 -2.005981,-3.359001c-0.024994,-0.755997 5.832001,-4.432999 10.824005,-5.925995c4.993988,-1.493004 19.970978,-2.752998 26.78299,-1.026001c6.812012,1.725998 19.738007,2.752998 22.350006,5.085999c2.612976,2.333 4.43399,8.632004 0,16.424004c-4.432007,7.792 -7.744019,17.029999 -9.098022,19.409996c-1.353973,2.379997 -6.437988,11.431999 -8.212982,13.577995c-1.77301,2.146011 -5.459015,5.92601 -6.110992,6.065002c-0.652008,0.141006 -3.03302,0.934006 -3.5,-1.166c-0.46701,-2.100006 -3.219025,-11.945007 -5.318024,-15.257996c-2.10199,-3.312004 -6.905975,-7.418999 -8.679993,-8.025002s-11.244995,5.973 -12.878998,8.398003c-1.632996,2.427002 -8.070984,16.283997 -9.003998,19.177002c-0.93399,2.893997 -3.639008,16.610992 -2.894012,22.069992c0.746002,5.459 4.806,18.337997 6.812012,23.376999c2.006989,5.039001 10.125,20.529007 11.385986,23.936005s6.952026,21.791 6.999023,23.843994c0.046997,2.054001 2.052979,19.690018 0.60498,26.035995s-5.411987,20.018005 -6.718994,22.630005c-1.306,2.613007 -10.777008,18.244019 -13.390991,21.369995s-11.571014,12.600006 -18.479004,16.330017c-6.903992,3.731995 -16.75,7.93399 -20.996002,9.519989s-32.195007,3.5 -39.708984,3.174011c-7.512024,-0.328003 -28.647003,-1.588013 -34.994019,-2.707001s-11.89801,-1.39801 -12.270996,-0.886993c-0.373993,0.513977 -0.231995,7.792999 -5.085999,10.218994s-13.764008,4.618988 -17.963989,6.110992c-4.199005,1.493988 -16.657013,3.312012 -20.20401,4.014008c-3.546005,0.699005 -19.270996,3.96698 -21.462997,4.759979c-2.192001,0.792999 -11.887009,2.014008 -12.365005,1.959015c-0.479004,-0.053009 -2.705994,2.286987 -4.619003,2.985992c-1.912994,0.699005 -6.251999,0.46701 -6.718994,-0.561005c-0.466003,-1.024994 -1.037994,-1.024994 -1.248001,-0.98999s-1.128006,1.354004 -1.434998,1.330017c-0.306,-0.027008 -0.708008,-0.736023 -1.119995,-0.771027c-0.411011,-0.035004 -2.729004,2.13501 -3.185013,2.344025c-0.455002,0.210999 -0.638992,0.122986 -0.909988,0c-0.271011,-0.121002 -0.481003,-1.318024 -0.525009,-1.504028c-0.043991,-0.18399 0.630005,-2.554993 1.050003,-3.161987c0.419998,-0.605011 -0.932999,-1.213013 -0.326996,-1.86499s-0.279999,-6.205017 0.233002,-10.218994c0.513,-4.014008 4.945999,-7.277008 6.858994,-7.840027c1.912994,-0.55899 6.018997,-1.585999 6.486008,-1.817993c0.465988,-0.231995 4.478989,-2.192993 5.271988,-2.893005c0.792999,-0.700989 6.391998,-2.659973 7.09201,-2.894989c0.699997,-0.231995 3.873001,-1.445007 4.572998,-1.72699c0.699997,-0.279022 2.145996,-0.652008 1.912994,-2.287018c-0.233002,-1.632996 -1.373993,-3.876984 -1.772995,-4.104004c-0.399002,-0.228973 -13.018005,-2.707001 -18.150009,-4.246002c-5.132996,-1.540985 -11.011993,-4.106995 -12.131989,-4.806976c-1.12001,-0.699005 -2.378998,-1.77301 -2.939011,-1.399994s0.187012,2.333984 -0.513,3.220978c-0.699997,0.886993 -9.00499,8.817993 -11.897995,12.037018c-2.893005,3.220978 -6.205994,9.052979 -9.052002,12.645996c-2.845993,3.59198 -4.386002,7.837982 -9.052002,9.052979c-4.666,1.213013 -14.371994,0.232025 -19.830994,0.279022s-9.891998,-0.654022 -13.858002,0.046997c-3.966003,0.699005 -9.751999,1.911987 -10.592003,1.770996s-1.544998,-0.460999 -1.865997,-0.420013c-0.320999,0.041016 -1.161003,0.56601 -1.528,0.670013c-0.366997,0.105011 -1.906998,0.402008 -2.205002,0.246002c-0.296997,-0.15799 -1.521996,0.018005 -1.801994,0.156006c-0.280006,0.140991 -1.286003,0.483978 -1.452003,0.403992c-0.167,-0.082001 -0.740997,-0.660004 -1.271004,-0.660004c-0.529999,0 -2.309998,0.350006 -2.635994,0.278992c-0.327003,-0.067993 -2.450005,0.046997 -3.826004,0.046997s-2.799995,0.070007 -3.5,0.490021c-0.699997,0.419983 -1.959,0.678009 -2.519997,0.630981c-0.561005,-0.048981 -1.167,0.46701 -1.330002,0.512024c-0.164001,0.046997 -0.467003,-0.561005 -0.489998,-0.839996c-0.023003,-0.279022 0.933998,-1.959015 1.422997,-2.893005c0.488998,-0.934021 0.256004,-1.025024 1.330002,-1.891022c1.073997,-0.862976 1.236,-0.978973 1.726997,-1.375c0.490005,-0.39798 0.886002,-0.653992 0.840004,-0.747986c-0.047005,-0.09201 -0.315002,-0.049011 -0.630005,0.093994c-0.314995,0.144989 -2.403,0.957001 -2.962997,1.307007c-0.559998,0.35199 -1.68,1.188995 -2.193001,1.656006c-0.513,0.46698 -1.237,1.144989 -1.400002,0.957001c-0.163994,-0.188019 -0.448997,-1.44101 -0.419998,-1.72702c0.028999,-0.286987 1.330002,-4.198975 1.563004,-4.597992c0.232994,-0.395996 0.536995,-1.071991 1.027,-1.515991c0.489998,-0.442993 -0.139999,-0.701019 -0.537003,-0.373016c-0.396004,0.326019 -1.515999,0.725006 -1.609001,1.002014c-0.094002,0.281006 -0.396996,-0.699005 -0.186996,-1.119019s0.723,-1.050995 1.027,-1.491974c0.302994,-0.443024 1.002998,-1.098022 1.329994,-1.307007c0.327003,-0.210999 -0.839996,-0.420013 -1.282997,-0.281006c-0.443001,0.140991 -1.190002,-0.067993 -0.910004,-0.46701c0.280006,-0.394989 2.426003,-2.728973 3.033005,-3.03299c0.607002,-0.303009 3.593002,-1.910004 3.918999,-2.006012c0.325996,-0.093994 1.072998,-0.138977 1.330002,-0.231995c0.255997,-0.093994 2.986,-1.958984 4.338997,-2.311005c1.354004,-0.349976 3.43,-0.302979 3.966003,-0.116974c0.536995,0.188995 2.123001,0.280975 2.565994,0.001984c0.443001,-0.278992 1.330002,-1.890991 1.890007,-2.028992c0.559998,-0.140991 5.319,-1.26001 6.928993,-1.562012c1.609001,-0.304993 6.952003,-1.518005 8.235001,-1.561981c1.283005,-0.047028 6.579002,0.067993 7.068993,0.138977c0.490005,0.070007 2.753006,0.143005 2.916016,0.117004c0.164001,-0.02298 1.166992,-0.231995 1.28299,-0.350006c0.117004,-0.116974 -3.918991,-0.746002 -7.814995,-1.073975c-3.896004,-0.326019 -8.889,-0.90802 -12.318001,-1.049011c-3.429001,-0.140991 -9.262001,0.140991 -11.245003,0.979004c-1.982994,0.839996 -4.339996,1.679993 -4.852997,1.632996c-0.514,-0.046997 -1.282997,0.46701 -1.843002,0.583984s-1.912994,0.094025 -2.565994,-0.067993c-0.653,-0.164001 -1.68,-0.725006 -2.123001,-0.700989s-2.496002,-0.02301 -3.383003,0.700989c-0.886002,0.722992 -1.562996,0.90802 -1.935997,1.096008c-0.374001,0.187988 -1.359001,0.13501 -1.394005,-0.05899c-0.034996,-0.19101 0.280006,-1.400024 0.507004,-1.785004s1.260002,-2.781006 1.487,-3.078003c0.227997,-0.299011 0.542,-1.330017 0.699997,-1.52301c0.158005,-0.190979 0.403,-1.083984 0.595001,-1.43399c0.192001,-0.35199 0.487,-0.972992 0.419998,-1.121002s-1.521996,0.402008 -1.661995,0.367004c-0.139999,-0.035004 -0.963005,0.665985 -1.260002,0.804993c-0.296997,0.140991 -1.161003,0.085999 -1.236,-0.079987c-0.074997,-0.166016 0.710999,-1.824005 0.886002,-2.053009c0.174995,-0.230011 1.353996,-1.014008 1.492996,-1.167999c0.139999,-0.153992 1.062004,-1.195007 1.120003,-1.39801c0.057999,-0.204987 0.209999,-0.794983 0.093002,-0.93399c-0.117004,-0.140991 -1.709,-0.571991 -1.773003,-0.839996c-0.064003,-0.27002 2.566002,-3.731995 4.899002,-5.039001c2.333,-1.308014 3.078995,-1.681 3.311996,-2.054016c0.233002,-0.373993 0.233002,-1.681 1.213005,-2.191986c0.979996,-0.514008 2.659996,-0.934998 3.172997,-1.354004c0.513,-0.42099 0.390999,-0.781006 0.980003,-1.118988c0.588997,-0.33902 11.197998,-0.888 17.777,-0.279999c6.578995,0.605988 11.198006,0.372986 14.836998,-2.893005c3.639999,-3.268005 6.718994,-11.524994 4.619003,-16.563995c-2.100006,-5.039001 1.119995,-2.56601 -4.152008,-5.926025c-5.272995,-3.358978 -9.658997,-12.877991 -9.938995,-15.116974c-0.279999,-2.240021 -1.353004,0.140991 -4.152,-2.894012s-8.864998,-22.115997 -9.705002,-25.615997c-0.839996,-3.499008 0.093002,-5.925995 0.466003,-6.484009c0.374001,-0.561996 -1.300003,-2.314987 -1.68,-4.292999c-0.379005,-1.978989 0.232994,-14.931992 1.212997,-18.757996c0.979004,-3.826004 5.786003,-14.791 6.859001,-16.237991c1.072998,-1.446014 1.658997,-1.630005 1.82,-1.912003c0.159996,-0.283005 -0.419998,-2.800003 0.373001,-8.725998c0.792999,-5.92601 4.666,-12.599014 5.179001,-13.485001c0.513,-0.886002 0.653,-1.306 0.699997,-1.726013c0.147003,-1.322998 -2.347,-3.332001 -2.706001,-4.945999c-0.559998,-2.519989 -0.419998,-3.220001 -0.373001,-3.825989c0.046005,-0.606003 -0.653,-2.041 -1.632996,-2.520004s-4.386002,2.753006 -10.592003,4.432999s-11.041,0.735001 -12.411995,0.746994c-1.370003,0.012009 -18.943001,7.838013 -26.456001,12.645004c-7.512001,4.806 -13.718002,8.818008 -14.838001,9.378998c-1.120003,0.559998 -4.666,6.346008 -5.739002,6.812012c-1.072998,0.466995 -1.632999,1.119995 -1.399998,1.72699c0.232998,0.606003 0.559998,1.865997 0.84,2.380005c0.279999,0.513 0.933998,0.856995 0.699997,1.399002c-0.232998,0.542999 -1.119999,0.419998 -1.354,0.326996c-0.232998,-0.093994 -1.306,-1.072998 -1.632999,-1.167007c-0.327,-0.092987 -1.959999,-0.699997 -2.239998,-1.165985c-0.280003,-0.46701 -0.747002,-0.327011 -1.400002,-0.980011c-0.653,-0.653 -6.532001,0.980011 -8.584999,0.514008c-2.053001,-0.46701 -5.646,-1.727005 -5.926001,-2.286011c-0.280001,-0.560989 -0.98,-0.886993 -1.306999,-0.699997s-0.280001,1.91301 0.187,2.893005c0.466999,0.979996 1.613998,2.360992 1.493,2.707001c-0.121,0.345001 -0.902,0.110001 -1.26,-0.094009c-0.358,-0.203995 -6.346001,-6.718994 -6.672001,-8.817993c-0.326,-2.098999 -0.325001,-2.406998 -0.513,-2.520004c-0.188,-0.112991 -3.265999,-0.093994 -6.393,-6.531998c-3.125999,-6.438995 -3.218999,-8.959 -2.473,-12.645996c0.747,-3.686005 -1.104,-5.925995 -0.164,-8.462997c1.33,-3.587006 6.922998,-3.843002 10.935999,-5.757004c4.013,-1.912003 12.999998,-8.625992 17.643,-21.101997c4.371002,-11.744003 4.488003,-15.457001 4.403999,-16.814003c-0.052998,-0.840004 -1.265999,-4.639 -0.810997,-7.775002c0.267998,-1.848999 8.386997,-8.811996 11.337997,-13.484001c2.783001,-4.403999 9.985004,-10.591995 11.059002,-11.290993c1.072998,-0.700005 1.848999,-1.23201 2.099998,-1.447006c0.285995,-0.243996 0.187004,-2.612 0.513,-3.639c0.327003,-1.027 1.212997,-2.054001 1.633003,-2.333c0.43,-0.286995 1.497993,-0.583 1.853996,-1.061996zm142.172005,79.816002c0.139999,-1.096008 -0.222,-10.545013 -0.805008,-10.988007c-0.582993,-0.442993 -4.164993,4.444 -4.970001,5.845001c-0.804993,1.399002 -3.289001,5.319 -3.394989,6.893997c-0.104004,1.574997 -0.38501,4.164001 1.014999,5.564011c1.399994,1.398987 4.93399,3.429993 5.423996,3.533997c0.490005,0.104996 0.804993,-0.559998 1.050003,-1.399002c0.244995,-0.839005 0.909988,-4.619003 1.050003,-5.738998c0.139999,-1.121002 0.48999,-2.613998 0.630997,-3.710999zm-12.564011,-45.142006c-0.828003,-0.699997 -7.768997,3.220001 -9.27301,6.438004c-1.50499,3.220001 -4.059998,7.103996 -2.868988,10.709c1.188995,3.603996 4.899002,5.423996 7.733002,5.493996c2.834991,0.069 7.418991,2.064003 9.658997,2.345001c2.23999,0.278999 3.429001,0.979004 3.884003,0.385002s-1.295013,-11.197998 -2.345001,-13.193001c-1.050003,-1.993996 -2.415009,-5.307999 -2.822998,-5.914001c-0.40799,-0.605995 -3.136993,-5.564995 -3.966003,-6.264z";
		
		var path = figures[shape.figure];
		var box = Raphael.pathBBox(path);
		var matrix = Raphael.matrix();
		matrix.translate( -box.x - box.width / 2 + drawboard.center.x, -box.y - box.height / 2 + drawboard.center.y);
		var max = Math.max(box.width, box.height);
		var cx = box.x + box.width / 2;
		var cy = box.y + box.height / 2;
		var scale = ( 200.0 / max ) / 100.0 * size * drawboard.scale;
		matrix.scale( (getordef( shape.mirror, 'no' ) == 'yes' ? -1 : 1) * scale, scale, cx, cy );
		c = paper.path( Raphael.mapPath(path, matrix));
	}
	else if ( shape.type == "flower" ) 
	{
		var mainR = getordef( shape.r, 0 ) * drawboard.scale;
		var numLeaves = getordef( shape.numleaves, 0 );
		var segmented = getordef( shape.segmented, 0 );

		var leafR = getordef( shape.rleaves, 0 ) * drawboard.scale;
		var offsleaves = getordef( shape.offsleaves, 0 );
	
		var flowercenter = new Pos( drawboard.center.x, drawboard.center.y - ooc * drawboard.scale );
		var start = flowercenter.translate_( 0, -mainR ).rot( - 180 / numLeaves + 3.6 / numLeaves * offsleaves, flowercenter );
		
		var path = "M" + ( ( segmented == 1 ) ? flowercenter.str() + " L" : "" ) + start.str();

		for ( var i = 0; i < ( ( segmented == 1 ) ? 1 : numLeaves ); i ++ ) {
			var invert = getordef( shape.invert, 0 );
			var params = "0 0 1";
			if ( invert == 1 || invert == 2 && i % 2 == 0 ) params = "0 0 0";
			path+= A( leafR, params, start.rot_( 360 / numLeaves * ( i + 1 ), flowercenter ) );
		}
		c = paper.path( path + " Z" );
	} 
	else if ( shape.type == "rectangle" )
	{
		var height = getordef( shape.height, 100 ) * drawboard.scale;
		var width = getordef( shape.width, 100 ) * drawboard.scale;

		var p0 = new Pos ( drawboard.center.x, drawboard.center.y );
		var topleft    	= p0.translate_(-width, -height).rot_( 180 / 100 * aoffsElement, p0 );
		var bottomleft 	= p0.translate_(-width, +height).rot_( 180 / 100 * aoffsElement, p0 );
		var topright 	= p0.translate_(+width, -height).rot_( 180 / 100 * aoffsElement, p0 );
		var bottomright = p0.translate_(+width, +height).rot_( 180 / 100 * aoffsElement, p0 );

		c = paper.path( "M" + topleft.str() + " L" + bottomleft.str() + " L" + bottomright.str() + " L" + topright.str() + " Z" );
	}
	else if ( shape.type == "braid" ) 
	{
		var n = shape.n / 3;
		var amplitude = shape.amp;
		var r = getordef( shape.r, 100 );
		var part = getordef( shape.part, 1 );
		var phaseoffs = 360 / n / 100 * getordef( shape.phaseoffs, 0 ) ;
		width = shape.width;

		var curve = new CurveDef( new Pos( 0, -1 ), DrawCalc.sinecurves() ).scale(1, amplitude).repeat( 1 );
		var curveRev = new CurveDef( new Pos( 1, -1 ), DrawCalc.sinecurvesReversed() ).scale(1, amplitude).repeat( 1 );

		var paths = new Array();

		try {
			var subpath1 = false;
			var subpath2 = false;

			// paths[2] is common to both cases
			paths[2] = curveRev.clone(3, 19).circlify( r - width, phaseoffs + 240 / n, n ).str();
			
			if ( part == 1 ) {
				paths[1] = curve.clone(3, 13).circlify( r, phaseoffs, n ).str();
				paths[4] = curve.clone(6, 22).circlify( r, phaseoffs - 120 / n, n ).str();
	
				var cutoffLeft2  = DrawCalc.intersect( paths[1] , paths[2], true, false, false ).j;
				var cutoffLeft4  = DrawCalc.intersect( paths[4] , paths[1], true, true, false ).i;
				var cutoffRight4 = DrawCalc.intersect( paths[4] , paths[1], true, true, true ).i;
				var cutoffRight2 = DrawCalc.intersect( paths[1] , paths[2], true, false, true ).j;
	
				subpath1 = new CurveDef().fromString( Raphael.getSubpath( paths[4], cutoffLeft4, cutoffRight4  ) );
				subpath2 = new CurveDef().fromString( Raphael.getSubpath( paths[2], cutoffRight2, cutoffLeft2 ) );
			}
	
			if ( part == 2 ) {
				paths[5] = curve.clone(0, 13).circlify( r, phaseoffs + 120 / n, n ).str();
				paths[6]  = curveRev.clone( 12, 24 ).translate( 1, 0 ).circlify( r - width, phaseoffs + 120 / n, n ).str();
	
				var cutoffLeft5_2  = DrawCalc.intersect( paths[5], paths[2], true, false, false ).i;
				var cutoffLeft6_2  = DrawCalc.intersect( paths[6], paths[2], false, false, false ).i;
				var cutoffRight5_2 = DrawCalc.intersect( paths[5], paths[2], true, false, true ).i;
				var cutoffRight6_2 = DrawCalc.intersect( paths[6], paths[2], false, false, true ).i;
	
				subpath1 = new CurveDef().fromString( Raphael.getSubpath( paths[5], cutoffLeft5_2, cutoffRight5_2  ) );
				subpath2 = new CurveDef().fromString( Raphael.getSubpath( paths[6], cutoffRight6_2, cutoffLeft6_2 ) );
			}
	
			if ( subpath1 && subpath2 ) { 
				subpath1.scale( drawboard.scale );
				subpath2.scale( drawboard.scale );
				subpath1.translate( drawboard.center.x, drawboard.center.y );
				subpath2.translate( drawboard.center.x, drawboard.center.y );
				c = paper.path( subpath1.str() + subpath2.str().replace("M", "L") + "Z" );
			}
		} catch (er) {
			console.log( er );
			if ( er == "IntersectFail") {
			}
		} 
	} 
	else if ( shape.type == "twist" ) 
	{
		var amplitude = shape.amp;
		var r = shape.r;
		var n = shape.n / 2;
		var phaseoffs = 360 / n / 100 * getordef( shape.phaseoffs, 0 );

		var curve = new CurveDef( new Pos( 0, -1 ), DrawCalc.sinecurves() ).scale(1, amplitude).repeat( 1 );
		var curveRev = new CurveDef( new Pos( 1, -1 ), DrawCalc.sinecurvesReversed() ).scale(1, amplitude).repeat( 1 );

		var paths = new Array();
		
		paths[0] = curve.clone( 3, 16 ).circlify( r, phaseoffs, n ).str();
		paths[1] = curveRev.clone( 3, 16 ).circlify( r - width, phaseoffs + 180 / n, n ).str();
		paths[2] = curveRev.clone( 9, 22 ).translate( 1, 0 ).circlify( r - width, phaseoffs, n ).str();
		paths[3] = curve.clone( 9, 22 ).circlify( r, phaseoffs - 180 / n, n ).str();

		try {
			var cutoffLeft = DrawCalc.intersect( paths[0], paths[1], true, false, false ).i;
			var cutoffRight = DrawCalc.intersect( paths[2], paths[3], false, true, true ).i;

			// Define final object
			var subpath1 = new CurveDef().fromString( Raphael.getSubpath( paths[0], cutoffLeft, Raphael.getTotalLength( paths[0] )  ) );
			var subpath2 = new CurveDef().fromString( Raphael.getSubpath( paths[2], cutoffRight, Raphael.getTotalLength( paths[2] ) ) );
	
			subpath1.scale( drawboard.scale );
			subpath2.scale( drawboard.scale );
			subpath1.translate( drawboard.center.x, drawboard.center.y );
			subpath2.translate( drawboard.center.x, drawboard.center.y );
			c = paper.path( subpath1.str() + subpath2.str().replace("M", "L") + "Z" );
		} catch (er) {
			if ( er == "IntersectFail") {
			}
		} 
	}
	
	if ( c != null ) c.jc_alwaysborder = getordef( shape.jc_alwaysborder, 0 );
	return c;
}

